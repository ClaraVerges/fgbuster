{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example of simulated component separation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate a sky\n",
    "We need a sky to clean. ForeGroundBuster relies on `pysm` for sky simulation but adds a  `pysm`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "from fgbuster.pysm_helpers import get_instrument, get_sky\n",
    "import healpy as hp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "nside = 32\n",
    "sky = get_sky(nside, 'c1d0s0')\n",
    "instrument = get_instrument(nside, 'litebird')\n",
    "freq_maps = instrument.observe(sky, write_outputs=False)[0]\n",
    "freq_maps = freq_maps[:, 1:]  # Select polarization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define what you fit for\n",
    "Notice that this choice is independent of what the actual sky contains. Here we fit for CMB, dust and synchrotron. The spectral index of dust and synchrotron are free parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fgbuster.component_model import CMB, Dust, Synchrotron\n",
    "components = [CMB(), Dust(150.), Synchrotron(20.)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Component separation\n",
    "The tools in DustBuster allow for very flexible and diverse component separation approaches. However, we also provide a set of predefined function that perform component separation out of the box. They suit most of the case-of-use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from fgbuster.separation_recipies import basic_comp_sep\n",
    "res = basic_comp_sep(components, instrument, freq_maps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the results\n",
    "Inspect both the non-linear parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fgbuster.visualization import corner_norm\n",
    "print res.params\n",
    "corner_norm(res.x, res.Sigma, labels=res.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and the component maps\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print res.s.shape\n",
    "hp.mollview(res.s[0,1], title='CMB')\n",
    "hp.mollview(res.s[1,1], title='Dust', norm='hist')\n",
    "hp.mollview(res.s[2,1], title='Synchrotron', norm='hist')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
